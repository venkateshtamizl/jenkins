{"version":3,"mappings":";0hBAEwB,OAAAA,KAAW,MAAAC,EAA+B,CAE9D,OAAAC,EAAA,WACE,aAAW,YACX,OACED,CACI,CACE,WAAiB,OAEnB,OCDZ,SAAwBE,EAAsB,CACtC,OACJ,kBAAAC,EACA,uBAAAC,CACA,mBAAAC,CACA,qBAAAC,IACA,gBAGF,CAAIC,GACK,WAGH,MAAAC,EAAoBC,MACFA,EAAE,QAAO,aAIVH,IAAE,SAAO,MAGhC,SAEI,OAAAI,gBAAA,IAAAC,EAAA,MAAC,QACC,WAAU,kDACV,OAAQ,yBAER,QAACV,QAAA,OAAI,QAAU,+BACb,SAAAA,GAAA,SACE,iBAAAE,OACA,aAAAE,MAEE,kBAEL,IACE,YAAAF,GAAuBS,IAAmB,MAAQ,0BACR,SAAc,UACxDT,EAAuBS,KAAmB,aAAe,OAC5D,EACAD,MAAA,CAAC,cACI,uBACH,KAAOR,GACP,aAEA,iBAAC,SAAO,GAAOS,EAAmB,UAAM,IAAgB,qBACvDX,OAAA,cAAO,CAAOW,aAA+B,SAAK,UAClDX,QAAA,QAAO,MAAOW,GAAmB,aAAa,OAAM,eAEzD,MAEA,KAAC,OACC,cAAU,mDACV,cAAQ,gBAER,SAACX,IAAA,QAAI,SAAU,kCACb,KAAAU,OAAC,cAAU,6BAA6B,WAAQ,YAC9C,aAAC,YACC,CAAG,QACH,CAAG,OACD,KACF,KAAK,SACL,QAAO,gBACP,cAAc,KACd,kBAAe,QACf,YAAY,CACd,QACC,YACC,CAAG,QACH,CAAG,MACH,EAAE,OACF,OAAK,IACL,OAAO,cACP,cAAc,cACd,SAAe,SACf,WAAY,OAEdV,EAAA,IAAC,YACC,CAAK,SACL,KAAO,eACP,eAAc,OACd,uBACA,eAAY,WACV,aAEJ,IAAC,cACI,OACA,MACH,CAAE,OACF,OAAK,GACL,UAAO,YACP,kBAAc,KACd,kBAAe,MACf,cAAY,CACd,GACAA,CAAA,MAAC,SACG,uEACF,OAAK,IACL,SAAO,aACP,sBACA,gBAAe,UACf,WAAY,KACd,CACF,SACI,kBAEL,SACE,WAAAI,CAAsBQ,EAAkB,IAAM,MAAQ,UAEzDF,CAAA,MAAC,aACI,yBACH,EAAON,IACP,OAAUS,IACV,UAAUX,CAAuBS,KAAmB,SAEpD,gBAAC,SAAO,YAAyB,CAAK,WAAG,MACxCX,KAAA,WAAO,OAAOY,CAAkB,KAAM,aAAI,UAE/C,CACAZ,SAAC,UAAI,OAAU,0BAA8B,KAGnD,CAEA,cACE,kBAAAE,QACA,eAIC,CACG,IAAAA,UAAuB,CAAUE,MAAsB,IAEvD,QAAAJ,CAAA,IAAC,UACC,UAAM,CACN,QAAO,SACP,QAAQ,YACR,SAAQ,WACF,6BAEN,kBAAC,OACC,CAAK,OACL,UAAS,aACT,OAAO,gBACP,WAAY,CAEZ,WAACA,QAAA,KAAK,OAAO,KAAE,EAAK,QAAM,KAAM,UAAO,OAAS,EAAK,GACrDA,MAAC,cAAQ,MAAQ,SAAS,SAAS,QACnCA,OAAC,QAAK,CAAG,QAAM,CAAG,MAAM,GAAG,OAAM,EAAG,QAAM,OAM9C,CAAAE,OAAuB,WAAgC,KAEvD,qBACE,SAAM,OACN,KAAO,UACP,KAAQ,iBACR,WACA,MAAM,8BAEN,eAAC,MACC,QAAK,GACL,SAAS,cACT,MAAO,YACP,YAAY,WAEZ,KAACF,KAAA,eAAY,MAAE,CAAK,OAAM,QAAM,KAAO,KAAM,KAAG,KAChDA,UAAC,IAAK,UAAS,EAAG,MAAM,MAAG,KAAM,CAAG,KAAM,IAC1CA,UAAC,IAAK,EAAG,QAAM,CAAG,MAAM,QAAG,CAAM,MAAG,EAAM,QAM9C,KAAAE,UAAuB,KAAeE,SAAsB,CAE5D,iBAAC,QACC,CAAM,SACN,MAAO,SACP,cAAQ,OACR,QAAQ,MACR,OAAM,4BAEN,kBAAC,GACC,QAAK,KACL,UAAS,cACT,CAAO,eACP,eAAY,EAEZ,UAACJ,QAAA,MAAK,SAAS,KAAK,SAAM,QAAM,OAAO,CAAM,UAC7CA,MAAC,WAAQ,WAAQ,QAAS,MAAM,CAAG,KAAM,KAC3C,SAMJE,CAAuB,cACtBA,OAAuB,aAAeE,CAAsB,UAG3D,IAAAJ,EAAA,OAAC,IACC,OAAM,WACN,OAAO,MACP,MAAQ,cACR,cACA,MAAM,8BAEN,iBAAC,IACC,OAAK,WACL,EAAS,YACT,KAAO,eACP,cAAY,OAEZ,QAACA,MAAA,WAAO,EAAK,EAAE,QAAK,IAAM,OAAM,MAAO,WAAS,CAAK,OACrDA,EAAC,UAAK,CAAG,SAAS,MAAM,SAAS,IAAG,OAAM,EAC5C,GCxNgB,UAAAc,UAAS,OAC/B,KAAOC,KAAuBC,eACxB,CAAE,gBAAAC,IAAiB,WAAAC,GAAc,eAAe,WAAAC,MAC1C,CAENC,MAEF,MAAK,YACC,UACN,MAAQC,OAAO,KAGf,KAAK,SACL,QAAM,UACN,YAAe,QAGf,MAAK,OACL,KAAM,YACN,WAAe,KAGf,MAAK,WACL,MAAM,UACN,SAAe,QAEjB,CACE,KAAK,cACC,WACN,OAAQA,CAAO,QACjB,CACA,KACO,WACL,IAAM,UACN,WAAe,KACjB,IAEE,GAAK,YACL,MAAM,gBACN,MAAe,WAIbC,CAAO,IAAMC,EAAW,KACxBC,CAAO,YAGX,KAAAxB,MAACyB,EAAQ,WAAS,UAChB,aAACC,KACE,CAAGC,IACJ,WACA,aAAgBH,WAChB,CAAU,SACV,UAAU,QAAS,KACnB,OAAQ,CAAC,GAAG,CAAE,IACd,MACGd,YAAA,EAAI,UAAU,mBAAmB,eAAY,mBAC5C,QAACA,UAAA,SAAI,QAAU,2BAA4B,qBAGvCV,EAAA,KAAC,gBACC,QACE,oFAEF,CAAS4B,QACV,aAED,CAEJ,KACU,OAAWC,KACnB,KAAC,kBAEC,MACE,2BACA,wBAEE,wBAAgC,CAACZ,KAAgB,SAC1C,SAIX,QAAS,WAAwB,IAAM,CAEvC,UAACjB,WAAA,EAAI,kBAAU,0BACb,YAAC8B,IACC,WAAa,KACb,QAAU,CAACb,EAAgB,WAAc,OAAM,CAC/C,aAAY,IAGfc,EAAK,WAET,CACH,SAGF,EAAA/B,EAAA,KAAC,YACC,aACE,eAEE,6BAEF,CACE,0BAA2BmB,CAAA,CAE/B,GACA,KAAK,aACL,IAAAa,EACA,QAASjB,KAAiBO,CAC1B,cAAY,aAEZ,MAACtB,MAAA,KAAI,MAAM,gCAA6B,QAAQ,YAC9C,iBAAC,MACC,UAAK,CACL,UAAO,YACP,cAAc,UACd,aAAe,YACf,SAAcmB,CAAkB,KAAL,CAC3B,EAAE,yCAEN,CACF,QClHR,SAAqC,CACnC,OAAAc,KACA,MAAAC,SACA,OACF,QACQ,CAAE,OAAAC,MAAQ,MAAAC,IAAW,iBAAoBC,OACxBC,CAAgBH,EAAQlB,SAE1B,aAClBsB,EAAwBC,MACvBC,CAAaF,IACf,KAEF,EAEA,QAAIN,CAAO,eAAwB,OAAE,OAC5B,iBAIN,CACC,kBAAC,OAAI,aAAW,cACd,UAACvB,QAAA,MAAI,YAAU,eACb,aAACV,GAAA,SAAI,UAAU,0BACb,OAAAU,IAAC,OAAI,MAAM,kCAA6B,WAAQ,MAC9C,UAAAV,UAAC,MACG,+EACG,QACL,IAAO,iBACP,gBAAiB,WACjB,SAAY,CACd,iBAEE,QAAK,KACL,KAAO,iBACP,cAAc,MACd,iBAAiB,KACjB,aAAY,MACV,0BACJ,MAGJA,MAAC,SACC,UAAU,0CACV,cAAY,QACP,YACL,cAAa,QACb,MAAY,QACZ,iBAAe,QACf,QAAW,OACX,OACA,UAAWQ,CAAM4B,MAAY,KAAO,UAExC,WACQ,YAGM,MAAW,IACxB1B,CAAA,YAAI,iBAAW,iBACd,GAAAV,MAAC,SAAI,OAAM,+BAA6B,UAAQ,OAC9C,eAAC,SACC,OAAK,SACL,EAAO,qBACP,QAAc,cACd,WAAe,OACf,cACA,WAAE,8BAEN,EACAA,WAAC,GAAI,WAAS,iBAIlBA,GAAC,KAAG,WAAW,WAAY,OAAK,SAAO,SAAY,oBAChD,OAAA0C,GAAe,IAAKC,OACnB,CAACC,UAECD,KACA,MAAU,OAAOT,CAAQ,EACzB,WAAU,CAHLS,QAMX,OAKN,QAAiBE,QAAK,SACpB,OAAAF,CACA,YACA,YAEA,OAAQ,OAAAR,CAAQ,gBAAAlB,GAAiB,qBACP,UAAY0B,EAAM,SAAS,OAAS,GACxDG,CAAa,UAAa,CAAE,QAC3BC,CAAYC,MAAiB,cAIpC,UAASC,CAAsBN,IAA2B,MACxD,cAAa,OAANA,eAAgB,IACpBO,OAAU,SAAe,OAAwCA,CAAK,GAIrE,UAAqB1C,CAAuB,CAChDA,IAAE,cAAgB,IACJ,CAACuC,SAGjBI,iBAAU,CAAM,eAIZjB,CAAQ,QAEZiB,SAAU,QACG,MAAU,GAAChC,IACAgB,EAAQlB,QAA0B,QAAW,WAIjEkB,KAAmC,CAAC,EAGtCzB,EAAA,OAAC,IACC,UAAU,iBACV,WAAM,KACL,GAAI0C,MAAgB,iBAAiC,SACtD,SAAeN,QACf,oBAAiB,CAASH,MAAQ,MAElC,gBAACjC,CAAA,OAAI,gBAAU,8BACbV,SAAC,SACO,gBAAoB2C,EAAM,OAChC,QAEMnC,EAAE,SAAW,GAAKA,MAAE,QAAa,cAInC,gBAEF,WAAQ,QAAa,GAAI,IAAI,oBAA0B,CAAE,KAEvD6C,QAAY,GAAOV,SAEP,CAACI,QAEjB,OAAWO,IAAW,oBACpB,mBAAyBR,EACzB,4BAAiC,UAClC,CACD,kBAAiB,cAAiB,eAElC,CAAApC,GAAA,WAAK,WAAW,wBACd,WAACV,UAAA,EAAI,UAAU,wBACb,YACE,QAAQ2C,CAAM,QACd,SAAYA,EAAM,wBAClB,CAAUA,MAAM,OAEpB,OACAjC,EAAC,OAAI,UAAW,yBACd,cAAC,OACC,YAAU,oBACV,QAAI,QAAiB,QAErB,WAACV,CAAA,YAAK,gBAAW,oBAA2B,UAAM,cAC3C,UAETA,MAAC,KAAI,QAAU,+BACb,eAAO,UAAU,eAAqB,GACxC,EACF,GACF,QAGAA,IAAA,EAAC,eACC,MAAWsD,CAAW,8BACpB,8BACD,CACD,QAASC,IACT,WAAY,MAAgB,cAAa,UAAkB,OAE3D,cAACvD,CAAA,QAAI,KAAM,6BAA6B,QAAQ,gBAC9C,OAAAA,MAAC,UACC,GAAK,QACL,SAAO,aACP,cAAc,QACd,cAAe,aACf,QAAY,KACZ,CAAE,4BAEN,KACF,CAEJ,IAECoD,CAAeL,SACb,OAAI,YAAU,kBACb,oBAAC,CACC,OAAM,OACN,eAAY,UAAaJ,KAAM,CAAI,OACnC,OAAW,UAEV,UAAMA,CAAA,SAAS,IAAKO,OACnB,EAACN,OAEC,EAAOM,KACP,aACA,OAHKA,IAKR,IAEL,KAIR,CAAC,KAGCf,EACAlB,EACAgB,IAEOA,IACJ,EAAKU,MACE,IAAAa,EAAmBb,QAAM,OACH1B,MAAuB,MAAQ,MAQvD,MAJF0B,KAAM,IAAK,WAAc,UAASR,EAAO,aAAa,QACtC,WAAe,IAAK,CAGnBqB,EAAiB,QAAS,CACpC,UAEL,SAIG,OAER,MAAQb,MAAUA,CAAU,QClQH,SACjBc,MAAgB,CCKtB,WAASC,CAAeC,OAC7B,CAAM,MAAEC,CAAK,YAAYC,IACvB,cAAgBF,EAAM,kBACtB,aAAiBA,IAAM,mBAGPG,CAAY,GAAI9C,YAAW,MACP,QAAIA,KAAmB,GAAE,CACzD,OAAoBA,UAAqB,IACzC,CAAC+C,KAA+B/C,QAAA,QAChC,MAECgD,CAAqBC,CAAsB,OAAIjD,OAAS,CAAK,EAE9DkD,MAA8B,WAEJC,QAAA,QAC9B,KAAOC,CAAgBC,GAAsBC,GAAsB,IACjE,KAAmBP,GAAY,MAAU,CAAK,MAC5C,CAAO,GACP,YAAeQ,OACf,QACA,OACF,CACA,GAAIC,KAAW,OAAY,GAAK,CAACH,KAAa,QAC9C,EAAMI,OAAW,CAAMC,MAAsC,CAC7D,QAAe,WAETC,EAAcF,KAAS,EAAK,UAAO,aAAM;AAAA,MAAU,CAErDD,EAAW,SAAU,EAAKA,EAAW,UAAWF,CAClDE,EAAW,MAAQ,CAAC,IAAGA,CAAW,MAAO,GAAGG,CAAW,GAEvDH,EAAW,MAAQG,EACnBH,kBAAgC,SAGvB,WAAmB,OAEfI,KAAU,SAAY,SAAwB,CAAC,EAChE,CACA,OAGqBT,CAAA,YACpBU,GAA+B,CACxB,MAAAC,EAAS,KAAI,gBAAgB,QAAS,gBAAgB,WAAW,CAAC,EACpE,KAAA5C,CAAW4C,IAAO,EAAI,gBAAe,CACzC,QACS,SAGc,GAAI,CAE3B,OAAMC,CAAOF,EAAM,KAAMG,IAAMA,CAAE,MAAe,EAC1CC,KAEN,OAAIF,WACc,SACP,SAETG,GACEH,CAAK,OAEL,QAASD,EAAO,KAAI,YAAY,EAAK,GAAG,EAAIP,CAAc,EAAE,CAC9D,GAGFT,GAAqB,EACrBqB,GAAyB,GAClB,CACT,EACA,EAAwB,CAC1B,EAEMC,EAA0BP,GAAsB,CACpD,GAAIb,EACF,UAGF,CAAIqB,EAAeR,aAAqBE,CAAS,QACjD,GAAI,CAACF,OAAe,OAAW,GAAK,EAACQ,CAC5B,kBAET,QAAWN,CAAQF,IACX,OAAaE,GAAK,UAAM,UACxBO,CAAqBD,GAAA,aAAAA,CAAc,MAAM,eAC/C,SACE,OAAY,UACZ,GAAKhE,EAAO,OACZ,KAAKA,QAAO,CAEH,UACT,mBACA,CAAKA,EAAO,qBACA,EACV,kBACO,uBASP,WACF,KAEMiE,GAAsBC,GAAcD,QAExC,CACJ,IAEK,MACT,CAEAnC,gBAAgB,CACFqC,KACT,IAAMX,GAAU,CAKf,GAJAA,EAAQA,MACRY,MAEgBC,EAAeb,CAAK,MAE5B,GAAAc,IAAqCd,CAAK,EAC5Cc,QACuB,UAErBA,CAAY,cACIC,CAAS,CAAC,UAAwB,EACpDV,OAEE,eAOJ,IAACtB,CAAA,MAAAA,cACkBiC,CAAA,CACnB,kBAAkBL,CAClB,UAAkB,CACV,SACJ,IAAK,UAAUtB,UAAgB,SAAW,qBAGpC,UACFyB,MACWA,GAAY,oBAGvBR,EAAkBS,kBAEhBD,EAAY,GACZ,GACA,KACF,CAEJ,CAGEG,MACOC,CAAI,KACJ,WAGb,cAAe,MAAOnC,IAAA,OAAK,kBAC3B,CAAUH,EAAA,KAGP,GACR,EACA,cACS,UAAM,wBAAyBuC,CAAK,IAC7C,CACF,IAAC,YAAApC,MAAK,EAAM,CAAC,QAEVqC,EAAoB9B,SAAA,OACvB3B,CAAmB,CAIlB,MAHuB,CAAI,EAEvB,KACAA,GAAW0D,IAAW,SAE1B,EAAMC,KAAsB,WAAsB,UAAY3D,CAAM,MACrC2D,EAAc,OAAS,CAAC,WACL,SAElD,OAAQ,UAAa,CAAI,MAAI,sBAEhB3D,CAAM,QACS,QAAY4D,CAAkB,CAAC,EAEvDC,GACFnB,EAAwBmB,EAAS,KAAI,CAAO,MAGhD,CAACH,EAAWrB,SAGQrC,EAAmB,OAElC8D,eAIcnB,CAACS,GAASA,OAAK,cAHhCT,EAAkBS,OAAaA,EAAMpD,KACb0C,CAAA1C,IAAQ,CAAO,QAMrC+D,CAAqB,CAAC/D,QACF0C,CAAA1C,EAAQ,IAAe,CACjD,IAEuBgE,GACd3B,SAAcE,SAAc,qBAI7B0B,UACA,OAAA5B,EAAA,WAAkB,CAClBE,KAAK,OAAYyB,GAAWzC,GAAY,KAAS,IAAE,CACrD0C,QAAiB,GAAI1C,EAAY,IAAIgB,IAAO,CAAE,CAChD,QAmBG,OACL,SAfmB,IAAwB,CACrC,MAAA2B,EAAazE,IACjB,aAAWU,EAASV,IAClB,EAAI,OAAOU,aAAgC,eACjC,OAAS,gBACF+D,EAAU/D,KAAM,aACZ,MAAAgE,CAAA,CACrB,CAEK,YACT,CACA,SAAmBD,IAAU9C,EAAA,YAAAA,IAAK,OAAU,OAAM,CACpD,aAIE,eACA,uBACA,oBACA,IAAQA,GAAA,YAAAA,EAAK,WAAW,CACxB,qBACA,eACA,uBACA,OAEJ,CAKA,YACE,qBACA,IAAAgD,EACA,cAAAC,EACA,SAAAC,EAAW,GACb,IAKoB,EAClB,MAAc,EAgBd,0BAda,CAAY,CACvB,aACE,EAAMf,KAAQ,gBACPA,CAAI,MAEW,CAAG,CACbgB,WAIZ,MAAM,IAAI,SAASC,EAAY,cAA4B,CAAC,EAEhE,GAEyB,GAElB,GAAM,CACDD,GAAA,CACZ,GCxSIE,QAAmBC,MAAWC,GAAA,UAAO,gCAAwB,mCAAC,EAEpE,eAAeC,MACP,aAA2BC,EAAsB,EAEhD,OACL,QAAOC,SAAA,OAAoB,MAAM;AAAA,KAAS,CAAC,EAC3C,UAAW,EACX,SACF,CACF,CAEO,SAASC,IAAuB,CACrC,OAAMxC,CAAiB,CACrB,GAAI,UACJ,IAAM,UACN,YAAO,WACP,GAAO1D,OAAO,GACd,iBAAiB,GACjB,KAAM,OACN,gBAAiB,MACjB,sBACA,SACA,0BAG4B,CAAIL,WAA4B,IAE9DmC,iBAAU,IAAM,CACJiE,QACP,EAAMrB,IACLyB,EAAazB,CAAI,KAElB,CACA,QAAO0B,CAAQ,QAAQ,IAAIA,CAAG,CAAC,CACpC,EAAG,OAAE,GAGF,MAAI,cAAW,eACd,UAACzH,CAAA,YAAI,SAAW,wBACd,SAAAA,EAAA,IAACiH,GAAA,MACC,KAAWS,GAAa,CAAE,MAAO,GAAI,UAAW,GAAG,OAAS,MAC5D,gBAAoB,IAAM,CAAC,GAC3B,MACA,eAAgB,SAK1B,CCpDA,WAAwBC,EAAoB,CAC1C,KAAM,IAAoB,KAAI3G,UAAa,YACPA,SAAc,EAC5C,CAAC4G,KAAiC5G,WAAS,IAEjDmC,cAAU,EAAM,CACd,MAAM0E,OACJ,OAAMC,CACJ,UAAO,eAAe,KAAS,eAAgB,UAC3CC,QAAe,CAAO,cACV,WAAS,cAAgB,iBAE7BD,CAAa,GACrBE,EAAWF,SAAwC,CACnDG,EAAaC,EAAYH,EAAe,GAE9CI,IAAgB,CAChBC,EAAcJ,CAAQ,GACtBK,CAAgBJ,CAAU,CAC5B,EAEkBJ,EAAA,EAEX,wBAAiB,SAAUA,OAC3B,oBAAiB,SAAUA,CAAiB,EAE7C,MAAAS,EAAW,IAAI,mBAAkC,CAC9C,iBAAQ,gBACf,SAAW,GACX,QAAS,MACT,UAAY,CACZ,iBACD,UAGQ,wBAAoB,cACpB,yBAAoB,SAAUT,CAAiB,GACtDS,CAAS,WAAW,CACtB,CACF,EAAG,EAAE,EAEL,SAAoB,GAAM,CACxB,cAAO,EAAS,CACd,IAAK,EACN,CACH,IAEuB,IAAM,QACpB,UACL,IAAK,SAAS,iBAAgB,aAElC,GAGE,aAAC,OACC,UAAWhF,IAAW,mCACpB,8BACD,CACD,gBAAcsE,CAEd,gBAAC,cACC,IAASW,EACT,UAAU,sBACV,IAAUC,EAEV,WAACxI,KAAA,MAAI,MAAM,6BAA6B,QAAQ,cAC9C,gBAAC,OACC,UAAK,EACL,OAAO,eACP,cAAc,QACd,eAAe,QACf,YAAY,QACV,4CAIRA,EAAA,IAAC,UACC,SAASyI,CACT,YAAU,gBACV,QAAUC,MAEV,UAAC1I,CAAA,WAAI,EAAM,gCAA6B,KAAQ,cAC9C,eAAC,QACC,OAAK,KACL,UAAO,aACP,eAAc,QACd,aAAe,QACf,YAAY,OACV,6CAGR,CACF,CAEJ,CCtFA,gBACQ,SACJ,cACA,kCACA,eACA,qBACA,EAAA2I,QACA,UAAAC,GACEC,EAAqB,gBAEL,YAAc,aAAe,CAAAlF,EAC3C,QAA8B3C,SAAS,EAAK,GAE5C8H,CAAaC,IAAc,kBAGZ,QAAiBC,EAChCC,IAAe,WACGL,CAAkBD,EAEjC,KAGTxF,WAAU,IAAM,CASd+F,EAPMD,IAAe,WACfA,MAAe,YACI,cAEhB,EAGW,GACnB,CAACF,EAAWC,EAAeL,EAAgBC,EAAiBK,CAAU,CAAC,EAE1E,KAAM,CAACE,EAAWD,CAAY,EAAIlI,WAAiBoI,CAAW,EAExDC,OAAaC,IAAuB,gBAGtB,SAChB,4BAGqC,CAAK,MAEtB9I,CAAkB,IACpC,CAAC+I,GAAY,QAGX,SACJR,CAAc,WACVvI,EAAE,QAAUgJ,QACV,MAAUA,EAAmB,EAE/BC,KAAc,KAAK,CACvBV,IAAc","names":["Skeleton","height","jsx","StagesCustomization","mainViewVisibility","setMainViewVisibility","stageViewPosition","setStageViewPosition","isMobile","handleViewChange","e","Fragment","jsxs","MainViewVisibility","StageViewPosition","handlePositionChange","Filter","visible","useState","visibleStatuses","toggleStatus","allVisible","statuses","Result","show","setVisible","hide","Tooltip","Tippy","DefaultDropdownProps","resetStatuses","index","StatusIcon","item","disabled","stages","selected","search","setSearch","useFilter","filterStageTree","event","nodeId","onNodeSelect","filteredStages","stage","TreeNode","memo","isSelected","isExpanded","setIsExpanded","hasSelectedDescendant","child","useEffect","hasChildren","onSelect","classNames","handleToggleClick","filteredChildren","POLL_INTERVAL","useStepsPoller","props","run","useRunPoller","setOpenStage","stepBuffers","userManuallySetNode","setUserManuallySetNode","stepsRef","useCallback","stepId","forceUpdate","startByte","LOG_FETCH_SIZE","stepBuffer","response","getConsoleTextOffset","newLogLines","setStepBuffers","steps","params","step","s","expanded","updateStepConsoleOffset","setExpandedSteps","getDefaultSelectedStep","selectedStep","selectedStepResult","stepResult","getRunSteps","setSteps","parseUrlParams","defaultStep","prev","startPollingPipeline","hasNewSteps","data","error","handleStageSelect","openStage","stepsForStage","newlyExpandedSteps","lastStep","expandedSteps","onMoreConsoleClick","stageId","buffers","findStage","result","onData","checkComplete","interval","polling","resolve","ConsoleLogStream","lazy","__vitePreload","fetchData","getConsoleBuildOutput","consoleBuildOutput","NoStageStepsFallback","setLogBuffer","err","logBuffer","ScrollToTopBottom","isScrollable","updateScrollState","scrollTop","windowHeight","atBottom","scrollable","docHeight","setIsAtTop","setIsAtBottom","setIsScrollable","observer","scrollToTop","isAtTop","scrollToBottom","isAtBottom","stageViewWidth","stageViewHeight","useLayoutPreferences","isVertical","direction","treeViewWidth","storageKey","setPanelSize","panelSize","initialSize","dividerRef","useRef","isDragging","getContainerOffset","clampedSize"],"ignoreList":[],"sources":["../../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../../frontend/common/components/filter.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../../frontend/pipeline-console-view/pipeline-console/main/NoStageStepsFallback.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx"],"sourcesContent":["import \"./skeleton.scss\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport { ChangeEvent } from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n    isMobile,\n  } = useLayoutPreferences();\n\n  if (isMobile) {\n    return null;\n  }\n\n  const handleViewChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n      <div className=\"jenkins-dropdown__separator\" />\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\" data-testid=\"filter-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n          aria-label={\"Filter\"}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport {\n  memo,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { Total } from \"../../../common/utils/timings.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: ReactMouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  if (stages.length === 1 && stages[0].placeholder) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <ol className={\"pgv-tree\"} role=\"tree\" aria-label={\"Pipeline Stages\"}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </ol>\n    </div>\n  );\n}\n\nconst TreeNode = memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage),\n  );\n\n  function hasSelectedDescendant(stage: StageInfo): boolean {\n    return stage.children?.some(\n      (child) => String(child.id) === selected || hasSelectedDescendant(child),\n    );\n  }\n\n  const handleToggleClick = (e: ReactMouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage)) {\n      setIsExpanded(true);\n    }\n  }, [selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible]);\n\n  return (\n    <li\n      className=\"pgv-tree-stage\"\n      role={\"treeitem\"}\n      {...(hasChildren ? { \"aria-expanded\": isExpanded } : {})}\n      aria-selected={isSelected}\n      aria-labelledby={`stage-${stage.id}-name`}\n    >\n      <div className=\"pgv-tree-item-container\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", {\n            \"pgv-tree-item--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n          aria-labelledby={`stage-${stage.id}-name`}\n        >\n          <div className={\"pgv-tree-item__content\"}>\n            <div className=\"pgv-status-icon\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </div>\n            <div className={\"pgv-tree-item__info\"}>\n              <div\n                className=\"pgv-tree-item__name\"\n                id={`stage-${stage.id}-name`}\n              >\n                <span className={\"jenkins-visually-hidden\"}>Stage </span>\n                {stage.name}\n              </div>\n              <div className=\"pgv-tree-item__description\">\n                <Total ms={stage.totalDurationMillis} />\n              </div>\n            </div>\n          </div>\n        </a>\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-tree-item__toggle\", {\n              \"pgv-tree-item__toggle--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={`${isExpanded ? \"Collapse\" : \"Expand\"} ${stage.name}`}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          <ol\n            role={\"group\"}\n            aria-label={`Stages in ${stage.name}`}\n            className={\"pgv-tree\"}\n          >\n            {stage.children.map((child) => (\n              <TreeNode\n                key={child.id}\n                stage={child}\n                selected={selected}\n                onSelect={onSelect}\n              />\n            ))}\n          </ol>\n        </div>\n      )}\n    </li>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: ReactMouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: ReactMouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getRunSteps,\n  LOG_FETCH_SIZE,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../PipelineConsoleModel.tsx\";\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  const [userManuallySetNode, setUserManuallySetNode] = useState(false);\n\n  const stepsRef = useRef<StepInfo[]>([]);\n\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffer = stepBuffers.get(stepId) ?? {\n        lines: [],\n        startByte: 0 - LOG_FETCH_SIZE,\n        endByte: -1,\n        stepId,\n      };\n      if (stepBuffer.startByte > 0 && !forceUpdate) return;\n      const response = await getConsoleTextOffset(stepId, startByte);\n      if (!response) return;\n\n      const newLogLines = response.text.trim().split(\"\\n\") || [];\n\n      if (stepBuffer.endByte > 0 && stepBuffer.endByte <= startByte) {\n        stepBuffer.lines = [...stepBuffer.lines, ...newLogLines];\n      } else {\n        stepBuffer.lines = newLogLines;\n        stepBuffer.startByte = response.startByte;\n      }\n\n      stepBuffer.endByte = response.endByte;\n\n      setStepBuffers((prev) => new Map(prev).set(stepId, stepBuffer));\n    },\n    [],\n  );\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n\n      setUserManuallySetNode(true);\n\n      const step = steps.find((s) => s.id === selected);\n      const expanded: string[] = [];\n\n      if (step) {\n        selected = step.stageId;\n        expanded.push(step.id);\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${0 - LOG_FETCH_SIZE}`),\n        );\n      }\n\n      setOpenStage(selected);\n      setExpandedSteps(expanded);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = (steps: StepInfo[]) => {\n    if (userManuallySetNode) {\n      return;\n    }\n\n    let selectedStep = steps.find((step) => step !== undefined);\n    if (!steps || steps.length === 0 || !selectedStep) {\n      return null;\n    }\n    for (const step of steps) {\n      const stepResult = step.state.toLowerCase() as Result;\n      const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n      switch (stepResult) {\n        case Result.running:\n        case Result.queued:\n        case Result.paused:\n          // Return first running/queued/paused step.\n          return step;\n        case Result.unstable:\n        case Result.failure:\n        case Result.aborted:\n          if (\n            run?.complete &&\n            selectedStepResult &&\n            stepResult < selectedStepResult\n          ) {\n            // If the run is complete return first unstable/failed/aborted step which has a state worse\n            // than the selectedStep.\n            // E.g. if the first step state is failure we want to return that over a later unstable step.\n            return step;\n          }\n          continue;\n        default:\n          // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n          if (selectedStepResult && stepResult <= selectedStepResult) {\n            selectedStep = step;\n          }\n      }\n    }\n    return selectedStep;\n  };\n\n  useEffect(() => {\n    getRunSteps()\n      .then((steps) => {\n        steps = steps || [];\n        setSteps(steps);\n\n        const usedUrl = parseUrlParams(steps);\n        if (!usedUrl) {\n          const defaultStep = getDefaultSelectedStep(steps);\n          if (defaultStep) {\n            setOpenStage(defaultStep.stageId);\n\n            if (defaultStep.stageId) {\n              setExpandedSteps((prev) => [...prev, defaultStep.id]);\n              updateStepConsoleOffset(\n                defaultStep.id,\n                false,\n                0 - LOG_FETCH_SIZE,\n              );\n            }\n          }\n        }\n\n        if (!run?.complete) {\n          startPollingPipeline({\n            getStateUpdateFn: getRunSteps,\n            onData: (data) => {\n              const hasNewSteps =\n                JSON.stringify(stepsRef.current) !== JSON.stringify(data);\n\n              if (userManuallySetNode) {\n                const defaultStep = getDefaultSelectedStep(steps);\n                if (defaultStep) {\n                  setOpenStage(defaultStep.stageId);\n\n                  if (defaultStep.stageId) {\n                    setExpandedSteps((prev) => [...prev, defaultStep.id]);\n                    updateStepConsoleOffset(\n                      defaultStep.id,\n                      false,\n                      0 - LOG_FETCH_SIZE,\n                    );\n                  }\n                }\n              }\n\n              if (hasNewSteps) {\n                setSteps(data);\n                stepsRef.current = data;\n              }\n            },\n            checkComplete: () => !run?.complete,\n            interval: POLL_INTERVAL,\n          });\n        }\n        return null;\n      })\n      .catch((error) => {\n        console.error(\"Error in getRunSteps:\", error);\n      });\n  }, [run?.stages]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      setUserManuallySetNode(true);\n\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n      const newlyExpandedSteps = lastStep ? [lastStep.id] : [];\n\n      history.replaceState({}, \"\", `?selected-node=` + nodeId);\n\n      setOpenStage(nodeId);\n      setExpandedSteps((prev) => [...prev, ...newlyExpandedSteps]);\n\n      if (lastStep) {\n        updateStepConsoleOffset(lastStep.id, false, 0 - LOG_FETCH_SIZE);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    setUserManuallySetNode(true);\n    if (!expandedSteps.includes(nodeId)) {\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, 0 - LOG_FETCH_SIZE);\n    } else {\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = (nodeId: string, startByte: number) => {\n    updateStepConsoleOffset(nodeId, true, startByte);\n  };\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  };\n}\n\n/**\n * Starts polling a function until a complete condition is met.\n */\nconst startPollingPipeline = ({\n  getStateUpdateFn,\n  onData,\n  checkComplete,\n  interval = 1000,\n}: {\n  getStateUpdateFn: () => Promise<StepInfo[] | null>;\n  onData: (data: StepInfo[]) => void;\n  checkComplete: (data: StepInfo[]) => boolean;\n  interval?: number;\n}): (() => void) => {\n  let polling = true;\n\n  const poll = async () => {\n    while (polling) {\n      const data = (await getStateUpdateFn()) || [];\n      onData(data);\n\n      if (checkComplete(data)) {\n        polling = false;\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, interval));\n    }\n  };\n\n  setTimeout(poll, interval);\n\n  return () => {\n    polling = false;\n  };\n};\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import { lazy, useEffect, useState } from \"react\";\n\nimport {\n  getConsoleBuildOutput,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../../../common/RestClient.tsx\";\nimport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nasync function fetchData(): Promise<StepLogBufferInfo> {\n  const consoleBuildOutput = await getConsoleBuildOutput();\n\n  return {\n    lines: consoleBuildOutput?.split(\"\\n\") ?? [],\n    startByte: 0,\n    endByte: 0,\n  };\n}\n\nexport function NoStageStepsFallback() {\n  const step: StepInfo = {\n    id: \"step-1\",\n    name: \"Step 1\",\n    title: \"Step 1 Title\",\n    state: Result.success,\n    completePercent: 100,\n    type: \"STEP\",\n    startTimeMillis: 0,\n    totalDurationMillis: 0,\n    stageId: \"\",\n    pauseDurationMillis: 0,\n  };\n\n  const [logBuffer, setLogBuffer] = useState<StepLogBufferInfo>();\n\n  useEffect(() => {\n    fetchData()\n      .then((data) => {\n        setLogBuffer(data);\n        return data;\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className={\"pgv-stage-steps\"}>\n      <div className={\"pgv-step-detail-group\"}>\n        <ConsoleLogStream\n          logBuffer={logBuffer ?? { lines: [], startByte: 0, endByte: 0 }}\n          onMoreConsoleClick={() => {}}\n          step={step}\n          maxHeightScale={0.65}\n        />\n      </div>\n    </div>\n  );\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport {\n  Children,\n  MouseEvent as ReactMouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: ReactMouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div\n        className={classNames(\"pgv-split-view__side-panel\", {\n          \"pgv-split-view__side-panel--vertical\": direction === \"vertical\",\n        })}\n      >\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n"],"file":"assets/PipelineConsole-5Uj64MX7.js"}